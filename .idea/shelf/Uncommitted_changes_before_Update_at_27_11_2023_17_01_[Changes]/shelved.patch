Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import ttk\r\nimport networkx as nx\r\nfrom estafeta import Estafeta\r\nfrom encomenda import Encomenda\r\nimport algoritmos as alg\r\nimport random\r\n\r\n\r\nclass Application:\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.root.title(\"Health Planet\")\r\n        self.root.geometry(\"500x500\")\r\n\r\n        # Adicionando a tela de boas-vindas com o logo\r\n        self.logo_label = tk.Label(\r\n            root, text=\"Health Planet\", font=(\"Helvetica\", 24))\r\n        self.logo_label.pack(pady=50)\r\n\r\n        # Adicionando um botão para continuar após o clique do usuário\r\n        self.continuar_btn = ttk.Button(\r\n            root, text=\"Clique para Continuar\", command=self.mostrar_menu)\r\n        self.continuar_btn.pack(pady=20)\r\n\r\n        # Inicialmente, ocultar o menu de escolha do algoritmo\r\n        self.menu_frame = ttk.Frame(root)\r\n        self.menu_frame.pack_forget()\r\n\r\n        # Configurando o menu\r\n        self.label = ttk.Label(self.menu_frame, text=\"Escolha o algoritmo:\")\r\n        self.label.pack(pady=10)\r\n\r\n        self.algoritmo_var = tk.StringVar()\r\n\r\n        self.radio_dfs = ttk.Radiobutton(\r\n            self.menu_frame, text=\"DFS\", variable=self.algoritmo_var, value=\"dfs\")\r\n        self.radio_dfs.pack()\r\n\r\n        self.radio_bfs = ttk.Radiobutton(\r\n            self.menu_frame, text=\"BFS\", variable=self.algoritmo_var, value=\"bfs\")\r\n        self.radio_bfs.pack()\r\n\r\n        self.radio_custo_uniforme = ttk.Radiobutton(\r\n            self.menu_frame, text=\"Custo Uniforme\", variable=self.algoritmo_var, value=\"custo_uniforme\")\r\n        self.radio_custo_uniforme.pack()\r\n\r\n        self.btn_executar = ttk.Button(\r\n            self.menu_frame, text=\"Executar\", command=self.executar_algoritmo)\r\n        self.btn_executar.pack(pady=10)\r\n\r\n        self.btn_sair = ttk.Button(\r\n            self.menu_frame, text=\"Sair\", command=root.destroy)\r\n        self.btn_sair.pack(pady=10)\r\n\r\n    def mostrar_menu(self):\r\n        # Esconder a tela de boas-vindas\r\n        self.logo_label.pack_forget()\r\n        self.continuar_btn.pack_forget()\r\n\r\n        # Mostrar o menu de escolha do algoritmo\r\n        self.menu_frame.pack(pady=50)\r\n\r\n    def executar_algoritmo(self):\r\n        escolha = self.algoritmo_var.get()\r\n\r\n        if escolha == \"dfs\":\r\n            algorithm = alg.dfs\r\n        elif escolha == \"bfs\":\r\n            algorithm = alg.bfs\r\n        elif escolha == \"custo_uniforme\":\r\n            algorithm = alg.custo_uniforme\r\n        else:\r\n            print(\"Escolha inválida.\")\r\n            return\r\n\r\n        g = nx.read_gml('./dados/grafo.gml')\r\n        est1 = Estafeta(1, 1)\r\n        enc1 = Encomenda(1, \"Fabio\", \"3\", \"10\", 3, 10)\r\n\r\n        encomendas = [\r\n            [i, f\"Cliente_{i}\", str(random.randint(1, 40)), str(\r\n                random.randint(1, 40)), random.randint(1, 10), random.randint(1, 10)]\r\n            for i in range(1, 101)\r\n        ]\r\n\r\n        visited, path, cost = algorithm(g, enc1.origin, enc1.destination)\r\n\r\n        print(f\"Resultado do algoritmo escolhido:\")\r\n        print(f\"Visited: {visited}\")\r\n        print(f\"Path: {path}\")\r\n        print(f\"Cost: {cost} m\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    root = tk.Tk()\r\n    app = Application(root)\r\n    root.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision a455d588d99ddfaa7d573308a4153a517ad21d59)
+++ b/main.py	(date 1701013255369)
@@ -41,9 +41,17 @@
             self.menu_frame, text="BFS", variable=self.algoritmo_var, value="bfs")
         self.radio_bfs.pack()
 
-        self.radio_custo_uniforme = ttk.Radiobutton(
-            self.menu_frame, text="Custo Uniforme", variable=self.algoritmo_var, value="custo_uniforme")
-        self.radio_custo_uniforme.pack()
+        self.radio_dijkstra = ttk.Radiobutton(
+            self.menu_frame, text="Dijkstra", variable=self.algoritmo_var, value="dijkstra")
+        self.radio_dijkstra.pack()
+
+        self.radio_iddfs = ttk.Radiobutton(
+            self.menu_frame, text="IDDFS", variable=self.algoritmo_var, value="iddfs")
+        self.radio_iddfs.pack()
+
+        self.radio_bidirectional = ttk.Radiobutton(
+            self.menu_frame, text="Bidirectional", variable=self.algoritmo_var, value="bidirectional")
+        self.radio_bidirectional.pack()
 
         self.btn_executar = ttk.Button(
             self.menu_frame, text="Executar", command=self.executar_algoritmo)
@@ -68,15 +76,19 @@
             algorithm = alg.dfs
         elif escolha == "bfs":
             algorithm = alg.bfs
-        elif escolha == "custo_uniforme":
-            algorithm = alg.custo_uniforme
+        elif escolha == "dijkstra":
+            algorithm = alg.dijkstra
+        elif escolha == "iddfs":
+            algorithm = alg.iddfs
+        elif escolha == "bidirectional":
+            algorithm = alg.bidirectional
         else:
             print("Escolha inválida.")
             return
 
         g = nx.read_gml('./dados/grafo.gml')
         est1 = Estafeta(1, 1)
-        enc1 = Encomenda(1, "Fabio", "3", "10", 3, 10)
+        enc1 = Encomenda(1, "Fabio", "3", "11", 3, 10)
 
         encomendas = [
             [i, f"Cliente_{i}", str(random.randint(1, 40)), str(
Index: algoritmos.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from collections import deque\r\nimport heapq\r\n\r\n\r\ndef dfs(graph, start, end, visited=None, cost=0, path=None, visited_list=[]):\r\n    if visited is None:\r\n        visited = set()\r\n    if path is None:\r\n        path = []\r\n\r\n    visited.add(start)\r\n    visited_list.append(start)\r\n    path = path + [start]\r\n\r\n    if start == end:\r\n        return visited_list, path, round(cost, 2)\r\n\r\n    for neighbor in graph.neighbors(start):\r\n        if neighbor not in visited:\r\n            edge_cost = graph[start][neighbor][\"length\"]\r\n            updated_cost = cost + edge_cost\r\n            result = dfs(graph, neighbor, end, visited, updated_cost, path, visited_list)\r\n            if result:\r\n                return result\r\n\r\n    return None\r\n\r\n\r\ndef bfs(graph, start, end):\r\n    visited = set()\r\n    visited_list = []\r\n    queue = deque([(start, [])])\r\n\r\n    while queue:\r\n        current_node, path = queue.popleft()\r\n\r\n        if current_node not in visited:\r\n            visited.add(current_node)\r\n            visited_list.append(current_node)\r\n            path = path + [current_node]\r\n\r\n            if current_node == end:\r\n                # Calculate the sum of edge costs along the path\r\n                cost = sum(graph[path[i]][path[i + 1]][\"length\"] for i in range(len(path) - 1))\r\n                return visited_list, path, round(cost, 2)\r\n\r\n            neighbors = graph[current_node]\r\n            queue.extend((neighbor, path) for neighbor in neighbors if neighbor not in visited)\r\n\r\n    return None\r\n\r\n\r\ndef custo_uniforme(graph, start, end):\r\n    lengths = {node: float('inf') for node in graph}\r\n    lengths[start] = 0\r\n\r\n    priority_queue = [(0, start)]\r\n    visited = []\r\n\r\n    while priority_queue:\r\n        current_length, current_node = heapq.heappop(priority_queue)\r\n\r\n        if current_length > lengths[current_node]:\r\n            continue\r\n\r\n        visited.append(current_node)\r\n\r\n        for neighbor, edge_data in graph[current_node].items():\r\n            edge_cost = edge_data[\"length\"]\r\n            total_cost = current_length + edge_cost\r\n\r\n            if total_cost < lengths[neighbor]:\r\n                lengths[neighbor] = total_cost\r\n                heapq.heappush(priority_queue, (total_cost, neighbor))\r\n\r\n    path = []\r\n    current = end\r\n    while current != start:\r\n        path.insert(0, current)\r\n        current = min((node for node in graph[current] if\r\n                       lengths[node] + graph[current][node][\"length\"] == lengths[current]),\r\n                      key=lambda x: graph[current][x][\"length\"])\r\n\r\n    path.insert(0, start)\r\n\r\n    return visited, path, round(lengths[end], 2)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algoritmos.py b/algoritmos.py
--- a/algoritmos.py	(revision a455d588d99ddfaa7d573308a4153a517ad21d59)
+++ b/algoritmos.py	(date 1701018909637)
@@ -50,7 +50,7 @@
     return None
 
 
-def custo_uniforme(graph, start, end):
+def dijkstra(graph, start, end):
     lengths = {node: float('inf') for node in graph}
     lengths[start] = 0
 
@@ -84,3 +84,83 @@
     path.insert(0, start)
 
     return visited, path, round(lengths[end], 2)
+
+
+def iddfs(graph, start, end, max_depth=2**31-1):
+    for depth in range(max_depth + 1):
+        result = dfs_limit(graph, start, end, depth)
+        if result:
+            if result[1]:
+                return result[0], result[1], round(result[2], 2)
+    return None
+
+
+def dfs_limit(graph, start, end, depth, visited=None, cost=0, path=None, visited_list=[]):
+    if visited is None:
+        visited = set()
+    if path is None:
+        path = []
+
+    visited.add(start)
+    visited_list.append(start)
+    path = path + [start]
+
+    if start == end:
+        return visited_list, path, round(cost, 2)
+
+    if depth > 0:
+        for neighbor in graph.neighbors(start):
+            if neighbor not in visited:
+                edge_cost = graph[start][neighbor]["length"]
+                updated_cost = cost + edge_cost
+                result = dfs_limit(graph, neighbor, end, depth - 1, visited, updated_cost, path, visited_list)
+                if result:
+                    return result
+
+    return None
+
+
+def bidirectional(graph, start, goal):
+    forward_visited = []
+    backward_visited = []
+    forward_queue = deque([(start, [], 0)])
+    backward_queue = deque([(goal, [], 0)])
+
+    while forward_queue or backward_queue:
+        if forward_queue:
+            forward_node, forward_path, cost = forward_queue.popleft()
+
+            if forward_node not in forward_visited:
+                forward_visited.append(forward_node)
+                forward_path.append(forward_node)
+# TODO: ISTO ESTÁ UMA CAGADA. É PRECISO ARRANJAR MANEIRA DE IR BUSCAR O CAMINHO AO BACKWARD_QUEUE. NAO SE PODE USAR O BFS
+                if forward_node == goal or forward_node in backward_visited:
+                    intersection_node = forward_node if forward_node in backward_visited else None
+                    _, b_path, b_cost = bfs(graph, intersection_node, goal)
+                    b_path.pop(0)
+                    path = forward_path + b_path
+                    return forward_visited + backward_visited, path, round(cost + b_cost, 2)
+
+                forward_neighbors = graph[forward_node]
+                forward_queue.extend((neighbor, forward_path.copy(), cost + graph[forward_node][neighbor]['length']) for neighbor in forward_neighbors if neighbor not in forward_visited)
+
+        if backward_queue:
+            backward_node, backward_path, cost = backward_queue.popleft()
+
+            if backward_node not in backward_visited:
+                backward_visited.append(backward_node)
+                backward_path = [backward_node] + backward_path
+# TODO: ESTE NÃO ESTÁ FEITO AINDA. FAZER ALTERAÇÕES PARECIDAS COM O DE CIMA E TESTAR
+                if backward_node == start or backward_node in forward_visited:
+                    intersection_node = backward_node if backward_node in forward_visited else None
+                    print(f"Int Node Back: {intersection_node}")
+                    print(f"For: {forward_visited}"
+                          f"Back: {backward_visited}")
+                    i = forward_path.index(intersection_node)
+                    path = forward_path[:i+1] + backward_path[:i][::-1]
+                    return forward_visited + backward_visited, path, cost
+
+                backward_neighbors = graph[backward_node]
+                backward_queue.extend((neighbor, backward_path.copy(), cost + graph[backward_node][neighbor]['length']) for neighbor in backward_neighbors if neighbor not in backward_visited)
+
+    return None
